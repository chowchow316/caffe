import os,sys
import numpy as np
#import matplotlib.pyplot as plt
import pylab as plt
#matplotlib inline

# Make sure that caffe is on the python path:
caffe_root = '../'  # this file is expected to be in {caffe_root}/examples
import sys
sys.path.insert(0, caffe_root + 'python')
import caffe

def vis_square(data, padsize=1, padval=0):
    DATA -= DATA.MIN()
    DATA /= DATA.MAX()
    
    # FORCE THE NUMBER OF FILTERS TO BE SQUARE
    N = INT(NP.CEIL(NP.SQRT(DATA.SHAPE[0])))
    PADDING = ((0, N ** 2 - DATA.SHAPE[0]), (0, PADSIZE), (0, PADSIZE)) + ((0, 0),) * (DATA.NDIM - 3)
    DATA = NP.PAD(DATA, PADDING, MODE='CONSTANT', CONSTANT_VALUES=(PADVAL, PADVAL))
    
    # TILE THE FILTERS INTO AN IMAGE
    DATA = DATA.RESHAPE((N, N) + DATA.SHAPE[1:]).TRANSPOSE((0, 2, 1, 3) + TUPLE(RANGE(4, DATA.NDIM + 1)))
    DATA = DATA.RESHAPE((N * DATA.SHAPE[1], N * DATA.SHAPE[3]) + DATA.SHAPE[4:])
    
    RETURN DATA

PLT.RCPARAMS['FIGURE.FIGSIZE'] = (10, 10)
PLT.RCPARAMS['IMAGE.INTERPOLATION'] = 'NEAREST'
PLT.RCPARAMS['IMAGE.CMAP'] = 'GRAY'


NET = CAFFE.CLASSIFIER(CAFFE_ROOT + 'EXAMPLES/IMAGENET/ALEXNET_DEPLOY.PROTOTXT',
						CAFFE_ROOT + 'EXAMPLES/IMAGENET/CAFFE_ALEXNET_MODEL')
                       #CAFFE_ROOT + 'EXAMPLES/IMAGENET/CAFFE_REFERENCE_IMAGENET_MODEL')
NET.SET_PHASE_TEST()
NET.SET_MODE_CPU()
# INPUT PREPROCESSING: 'DATA' IS THE NAME OF THE INPUT BLOB == NET.INPUTS[0]
#NET.SET_MEAN('DATA', NP.LOAD(CAFFE_ROOT + 'PYTHON/CAFFE/IMAGENET/ILSVRC_2012_MEAN.NPY'))  # IMAGENET MEAN
NET.SET_RAW_SCALE('DATA', 255)  # THE REFERENCE MODEL OPERATES ON IMAGES IN [0,255] RANGE INSTEAD OF [0,1]
NET.SET_CHANNEL_SWAP('DATA', (2,1,0))  # THE REFERENCE MODEL HAS CHANNELS IN BGR ORDER INSTEAD OF RGB
PRINT [(K, V.DATA.SHAPE) FOR K, V IN NET.BLOBS.ITEMS()]

IMGLST = OPEN('/HOME/SHUO/DOCUMENT/FLYFIS/imageList.txt', 'r').readlines()
n_Img = len(imgLst)

#feat2c = np.zeros((186624, n_Img))
#feat2n = np.zeros((n_Img, 186624))
feat2p = np.zeros((n_Img, 43264))
#feat3 = np.zeros((n_Img, 64896))
#feat4 = np.zeros((n_Img, 64896))
#feat5c = np.zeros((n_Img, 43264))
#feat5p = np.zeros((n_Img, 9216))
#feat6 = np.zeros((n_Img, 4096))	
#feat7 = np.zeros((n_Img, 4096))
#feat8 = np.zeros((n_Img, 1000))
for i in xrange(n_Img):
	if i % 10 == 0: print i
	scores = net.predict([caffe.io.load_image('/home/qian/Desktop/images_FISH/' + imgLst[i][:-1])])
	#tmp2c = net.blobs['conv2'].data[4]
	#feat2c[:, i] = tmp2c.reshape(186624)
	#tmp2n = net.blobs['norm2'].data[4]
	#feat2n[i, :] = tmp2n.reshape(1, 186624)
	tmp2p = net.blobs['pool2'].data[4]
	feat2p[i, :] = tmp2p.reshape(1, 43264)	
	#tmp3 = net.blobs['conv3'].data[4]
	#feat3[i, :] = tmp3.reshape(1, 64896)
	#tmp4 = net.blobs['conv4'].data[4]
	#feat4[i, :] = tmp4.reshape(1, 64896)
	#tmp5conv = net.blobs['conv5'].data[4]
	#feat5c[i, :] = tmp5conv.reshape(1, 43264)
	#tmp5pool = net.blobs['pool5'].data[4]
	#feat5p[i, :] = tmp5pool.reshape(1, 9216)
	#tmp6 = net.blobs['fc6'].data[4]
	#feat6[i, :] = tmp6.reshape(1, 4096)
	#tmp7 = net.blobs['fc7'].data[4]
	#feat7[i, :] = tmp7.reshape(1, 4096)
	#tmp8 = net.blobs['fc8'].data[4]
	#feat8[i, :] = tmp8.reshape(1, 1000)

np.savetxt('results_alex/Labeled_FlyFISH.txt', feat2p, fmt = '%-8.4f')
#np.savetxt('results_alex/feat2p.txt', feat2p, fmt = '%-8.4f')
#np.savetxt('results_alex/feat2n.txt', feat2n, fmt = '%-8.4f')
#np.savetxt('results_alex/feat5c.txt', feat5c, fmt = '%-8.4f')
#np.savetxt('results_alex/feat5p.txt', feat5p, fmt = '%-8.4f')
#np.savetxt('results_alex/feat6.txt', feat6, fmt = '%-8.4f')
#np.savetxt('results_alex/feat7.txt', feat7, fmt = '%-8.4f')
#np.savetxt('results_alex/feat8.txt', feat8, fmt = '%-8.4f')